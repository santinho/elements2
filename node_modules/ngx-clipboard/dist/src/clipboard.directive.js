var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ClipboardService } from './clipboard.service';
import { Directive, EventEmitter, HostListener, Input, Output, Renderer } from '@angular/core';
var ClipboardDirective = (function () {
    /**
     * @param {?} clipboardSrv
     * @param {?} renderer
     */
    function ClipboardDirective(clipboardSrv, renderer) {
        this.clipboardSrv = clipboardSrv;
        this.renderer = renderer;
        this.cbOnSuccess = new EventEmitter();
        this.cbOnError = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ClipboardDirective.prototype.ngOnInit = function () {
        if (!this.clipboardSrv.isSupported) {
            throw new Error('Your environment does not support copy.');
        }
    };
    /**
     * @return {?}
     */
    ClipboardDirective.prototype.ngOnDestroy = function () {
        this.clipboardSrv.destroy();
    };
    /**
     * @param {?} button
     * @return {?}
     */
    ClipboardDirective.prototype.onClick = function (button) {
        if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {
            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm, this.renderer), this.targetElm.value);
        }
        else if (this.cbContent) {
            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.renderer), this.cbContent);
        }
    };
    /**
     * Fires an event based on the copy operation result.
    \@param {Boolean} succeeded
     * @param {?} succeeded
     * @param {?} copiedContent
     * @return {?}
     */
    ClipboardDirective.prototype.handleResult = function (succeeded, copiedContent) {
        if (succeeded) {
            this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent });
        }
        else {
            this.cbOnError.emit({ isSuccess: false });
        }
    };
    return ClipboardDirective;
}());
__decorate([
    Input('ngxClipboard'),
    __metadata("design:type", HTMLInputElement)
], ClipboardDirective.prototype, "targetElm", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], ClipboardDirective.prototype, "cbContent", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ClipboardDirective.prototype, "cbOnSuccess", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], ClipboardDirective.prototype, "cbOnError", void 0);
__decorate([
    HostListener('click', ['$event.target']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], ClipboardDirective.prototype, "onClick", null);
ClipboardDirective = __decorate([
    Directive({
        selector: '[ngxClipboard]'
    }),
    __metadata("design:paramtypes", [ClipboardService,
        Renderer])
], ClipboardDirective);
export { ClipboardDirective };
function ClipboardDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    ClipboardDirective.prototype.targetElm;
    /** @type {?} */
    ClipboardDirective.prototype.cbContent;
    /** @type {?} */
    ClipboardDirective.prototype.cbOnSuccess;
    /** @type {?} */
    ClipboardDirective.prototype.cbOnError;
}
//# sourceMappingURL=clipboard.directive.js.map